function TENSION = mregularize(TF_PART, TF_FULL)
%MREGULARIZE computes deformation energy of the transformation
%
%   Parameters
%   ==========
%   TF_PART - structure (transformation for the part of the 3D image)
%   TF_FULL - structure (transformation of the entire 3D image; for scale)
%   TENSION - double (deformation energy)
%
%   Author
%   ======
%   Sergey Shuvaev, 2014-2021. sshuvaev@cshl.edu

if nargin == 1
    TF_FULL = TF_PART;
end

TENSION = 0;

%Scaling the transformation
TF_PART.Vx = (TF_PART.Vx - min(TF_FULL.Xs(:))) / ...
    (max(TF_FULL.Xs(:)) - min(TF_FULL.Xs(:)));
TF_PART.Vy = (TF_PART.Vy - min(TF_FULL.Ys(:))) / ...
    (max(TF_FULL.Ys(:)) - min(TF_FULL.Ys(:)));
TF_PART.Vz = (TF_PART.Vz - min(TF_FULL.Zs(:))) / ...
    (max(TF_FULL.Zs(:)) - min(TF_FULL.Zs(:)));
TF_PART.Xs = (TF_PART.Xs - min(TF_FULL.Xs(:))) / ...
    (max(TF_FULL.Xs(:)) - min(TF_FULL.Xs(:)));
TF_PART.Ys = (TF_PART.Ys - min(TF_FULL.Ys(:))) / ...
    (max(TF_FULL.Ys(:)) - min(TF_FULL.Ys(:)));
TF_PART.Zs = (TF_PART.Zs - min(TF_FULL.Zs(:))) / ...
    (max(TF_FULL.Zs(:)) - min(TF_FULL.Zs(:)));

[A, B, C] = size(TF_PART.Xs);

for a = 1 : A - 1
    for b = 1 : B - 1
        for c = 1 : C - 1
            
            %Selecting a subregion of the transformation grid
            N111 = [TF_PART.Vx(a, b, c), TF_PART.Vy(a, b, c), ...
                TF_PART.Vz(a, b, c)];
            N112 = [TF_PART.Vx(a, b, c + 1), TF_PART.Vy(a, b, c + 1), ...
                TF_PART.Vz(a, b, c+1)];
            N121 = [TF_PART.Vx(a, b + 1, c), TF_PART.Vy(a, b + 1, c), ...
                TF_PART.Vz(a, b + 1, c)];
            N122 = [TF_PART.Vx(a, b + 1, c + 1), TF_PART.Vy(a, b + 1, c + 1), ...
                TF_PART.Vz(a, b+1, c+1)];
            N211 = [TF_PART.Vx(a + 1, b, c), TF_PART.Vy(a + 1, b, c), ...
                TF_PART.Vz(a + 1, b, c)];
            N212 = [TF_PART.Vx(a + 1, b, c + 1), TF_PART.Vy(a + 1, b, c + 1), ...
                TF_PART.Vz(a + 1, b, c+1)];
            N221 = [TF_PART.Vx(a + 1, b + 1, c), TF_PART.Vy(a + 1, b + 1, c), ...
                TF_PART.Vz(a + 1, b + 1, c)];
            N222 = [TF_PART.Vx(a + 1, b + 1, c + 1), TF_PART.Vy(a + 1, b + 1, c + 1), ...
                TF_PART.Vz(a + 1, b + 1, c + 1)];
            
            O111 = [TF_PART.Xs(a, b, c), TF_PART.Ys(a, b, c), ...
                TF_PART.Zs(a, b, c)];
            O112 = [TF_PART.Xs(a, b, c + 1), TF_PART.Ys(a, b, c + 1), ...
                TF_PART.Zs(a, b, c + 1)];
            O121 = [TF_PART.Xs(a, b + 1, c), TF_PART.Ys(a, b + 1, c), ...
                TF_PART.Zs(a, b + 1, c)];
            O122 = [TF_PART.Xs(a, b + 1, c + 1), TF_PART.Ys(a, b + 1, c + 1), ...
                TF_PART.Zs(a, b + 1, c + 1)];
            O211 = [TF_PART.Xs(a + 1, b, c), TF_PART.Ys(a + 1, b, c), ...
                TF_PART.Zs(a + 1, b, c)];
            O212 = [TF_PART.Xs(a + 1, b, c + 1), TF_PART.Ys(a + 1, b, c + 1), ...
                TF_PART.Zs(a + 1, b, c + 1)];
            O221 = [TF_PART.Xs(a + 1, b + 1, c), TF_PART.Ys(a + 1, b + 1, c), ...
                TF_PART.Zs(a + 1, b + 1, c)];
            O222 = [TF_PART.Xs(a + 1, b + 1, c + 1), TF_PART.Ys(a + 1, b + 1, c + 1), ...
                TF_PART.Zs(a + 1, b + 1, c + 1)];
            
            %Estimating deformation energy of TF_PART via splitting each
            %grid cell within it into tetrahedra and computing changes of
            %the volume in each tetrahedron. The volume is computed as a
            %deteminant of vectors along tetrahedron's vertices, divided by 6 
            TENSION = TENSION + ...
                abs(abs(det([N112 - N111; N121 - N111; N211 - N111])) - ...
                abs(det([O112 - O111; O121 - O111; O211 - O111]))) + ...
                abs(abs(det([N112 - N122; N121 - N122; N222 - N122])) - ...
                abs(det([O112 - O122; O121 - O122; O222 - O122]))) + ...
                abs(abs(det([N121 - N221; N222 - N221; N211 - N221])) - ...
                abs(det([O121 - O221; O222 - O221; O211 - O221]))) + ...
                abs(abs(det([N112 - N212; N222 - N212; N211 - N212])) - ...
                abs(det([O112 - O212; O222 - O212; O211 - O212]))) + ...
                abs(abs(det([N112 - N211; N222 - N211; N121 - N211])) - ...
                abs(det([O112 - O211; O222 - O211; O121 - O211])));
        end
    end
end
TENSION = TENSION / 6;

end
